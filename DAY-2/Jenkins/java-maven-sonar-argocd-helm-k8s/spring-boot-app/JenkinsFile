pipeline {
    agent any

    environment {
        IMAGE_NAME = 'ultimate-cicd-pipeline'
        IMAGE_TAG = 'v1'
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-cred')
        DOCKER_HUB_REPO = 'sanjayhar'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Cloning source code..."
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                dir('DAY-2/Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    script {
                        docker.image('maven:3.8.7-openjdk-17').inside {
                            sh 'mvn clean package'
                        }
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo "üîç Running SonarQube analysis..."
                // Add sonar-scanner or SonarQube command here if configured
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_HUB_REPO}/${IMAGE_NAME}:${IMAGE_TAG} ."
                    withDockerRegistry([credentialsId: 'dockerhub-cred', url: '']) {
                        sh "docker push ${DOCKER_HUB_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                echo "üìÑ Updating Kubernetes deployment file with image tag..."
                sh """
                sed -i 's|image: .*|image: ${DOCKER_HUB_REPO}/${IMAGE_NAME}:${IMAGE_TAG}|' k8s/deployment.yaml
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "üöÄ Deploying to Kubernetes..."
                sh """
                kubectl apply -f k8s/deployment.yaml
                kubectl apply -f k8s/service.yaml
                """
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed.'
        }
    }
}
