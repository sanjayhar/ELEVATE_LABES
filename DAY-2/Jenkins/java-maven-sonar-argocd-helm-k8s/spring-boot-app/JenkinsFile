pipeline {
    agent {
        docker {
            image 'maven:3.8.6-eclipse-temurin-17'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE = "sanjayharish/ultimate-cicd-pipeline:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "✔️ Using SCM checkout automatically"
            }
        }

        stage('Build and Test') {
            steps {
                dir('DAY-2/Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://<your-sonarqube-ip>:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('DAY-2/Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir('DAY-2/Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh 'docker build -t ${DOCKER_IMAGE} .'
                        docker.withRegistry('https://index.docker.io/v1/', "dockerhub-cred") {
                            sh 'docker push ${DOCKER_IMAGE}'
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    kubectl apply -f DAY-2/Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    kubectl apply -f DAY-2/Jenkins/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/service.yml
                '''
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}
